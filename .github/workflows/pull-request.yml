name: Build and Test
on: pull_request

jobs:
  install:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Configure Doppler Config
        run: |
          doppler setup -t ${{ secrets.DOPPLER_TOKEN }} -p interface -c dev_gh-actions --no-interactive

      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"

      # - name: Check next.js build cache
      #   uses: actions/cache@v3
      #   id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #   with:
      #     path: |
      #       ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #       ${{ github.workspace }}/.next/cache
      #     key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      - name: Cypress build step
        uses: cypress-io/github-action@v4
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        with:
          install-command: yarn --frozen-lockfile --immutable --silent
          # Disable running of tests within install job
          runTests: false
          build: yarn build

      - name: Save build folder for other jobs
        uses: actions/upload-artifact@v2
        with:
          name: nextbuild
          if-no-files-found: error
          path: .next

  component-tests:
    runs-on: ubuntu-latest
    environment: dev
    needs: [install]
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        container: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.2

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Configure Doppler Config
      run: |
        doppler setup -t ${{ secrets.DOPPLER_TOKEN }} -p interface -c dev_gh-actions --no-interactive
    
    - name: Download the build folders
      uses: actions/download-artifact@v2
      with:
        name: nextbuild
        path: .next

    - run: yarn
    - run: yarn typechain:gen

    - name: Cypress run - component ðŸ§ª
      uses: cypress-io/github-action@v4
      with:
        install: false
        start: yarn start
        component: true
        record: true
        tag: ${{ github.ref_name }}
        parallel: true
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        CYPRESS_BASE_URL: ${{ secrets.CYPRESS_BASE_URL }}
        CYPRESS_NETWORK: ${{ secrets.CYPRESS_NETWORK }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NEXT_PUBLIC_SUPPORTED_NETWORKS: ${{ secrets.NEXT_PUBLIC_SUPPORTED_NETWORKS }}
        NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
        NEXT_PUBLIC_BLOG_PAGES_ENABLED: ${{ secrets.NEXT_PUBLIC_BLOG_PAGES_ENABLED }}    
        NEXT_PUBLIC_ON_CHAIN_RESOLVER_ENABLED: ${{ secrets.NEXT_PUBLIC_ON_CHAIN_RESOLVER_ENABLED }}
        NEXT_PUBLIC_CHAIN_ID: ${{ secrets.NEXT_PUBLIC_CHAIN_ID }}

    - name: âœ… Upload coverage to Codecov
      uses: codecov/codecov-action@v3.1.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
    # - name: Upload coverage report
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: "coverage-${{ matrix.container }}"
    #     path: coverage
    #     if-no-files-found: error 

  e2e-tests:
    runs-on: ubuntu-latest
    environment: dev
    needs: [install]
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.2
      
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Configure Doppler Config
      run: |
        doppler setup -t ${{ secrets.DOPPLER_TOKEN }} -p interface -c dev_gh-actions --no-interactive
    
    - name: Download the build folders
      uses: actions/download-artifact@v2
      with:
        name: nextbuild
        path: .next

    - run: yarn
    - run: yarn typechain:gen

    - name: Cypress run - e2e ðŸ§ª
      uses: cypress-io/github-action@v4
      with:
        install: false
        start: yarn start
        component: false
        browser: chrome
        record: true
        tag: ${{ github.ref_name }}
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        CYPRESS_BASE_URL: ${{ secrets.CYPRESS_BASE_URL }}
        CYPRESS_NETWORK: ${{ secrets.CYPRESS_NETWORK }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: âœ… Upload coverage to Codecov
      uses: codecov/codecov-action@v3.1.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
    # - name: Upload coverage report
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: coverage-e2e
    #     path: coverage
    #     if-no-files-found: error 
  
  # upload-codecov:
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   needs: [e2e-tests, component-tests]
  #   steps:
  #   - run: mkdir reports
  #   - name: Download coverage artifact - e2e
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-e2e
  #       path: reports/codecov-e2e

  #   - name: Download coverage artifact - 1
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-1
  #       path: reports/coverage-1

  #   - name: Download coverage artifact - 2
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-2
  #       path: reports/coverage-2

  #   - name: Download coverage artifact - 3
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-3
  #       path: reports/coverage-3

  #   - name: Download coverage artifact  - 4
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-4
  #       path: reports/coverage-4

  #   - name: Download coverage artifact - 5
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-5
  #       path: reports/coverage-5

  #   - name: Download coverage artifact - 6
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-6
  #       path: reports/coverage-6

  #   - name: Download coverage artifact - 7
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-7
  #       path: reports/coverage-7

  #   - name: Download coverage artifact  - 8
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-8
  #       path: reports/coverage-8

  #   - name: Download coverage artifact - 9
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-9
  #       path: reports/coverage-9

  #   - name: Download coverage artifact - 10
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: coverage-10
  #       path: reports/coverage-10

  #   - name: âœ… Upload coverage to Codecov
  #     uses: codecov/codecov-action@v3.1.0
  #     with:
  #       token: ${{ secrets.CODECOV_TOKEN }}
  #       directory: reports/
  #       fail_ci_if_error: true



  deploy-preview:
    if: startsWith(github.base_ref, 'feat') || startsWith(github.base_ref, 'fix') || startsWith(github.base_ref, 'main')
    runs-on: ubuntu-latest
    environment: sandbox
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2
        
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Configure Doppler Config
        run: |
          doppler setup -t ${{ secrets.DOPPLER_TOKEN }} -p interface -c dev_gh-actions --no-interactive
        
      - name: Checkout
        uses: actions/checkout@v2.4.2
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'yarn'
      - name: Install Dependencies
        run: yarn install --frozen-lockfile --immutable

      - name: Deploy Site
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_GH_TOKEN }}
        run: netlify deploy --build --message "main@${{ github.sha }}"
