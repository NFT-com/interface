/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GenesisKeyInterface extends utils.Interface {
  functions: {
    "MAX_SUPPLY()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelledOrFinalized(bytes32)": FunctionFragment;
    "claimGrantKey(uint256)": FunctionFragment;
    "claimKey(address,uint256)": FunctionFragment;
    "currentXP(uint256)": FunctionFragment;
    "finalEthPrice()": FunctionFragment;
    "genesisKeyMerkle()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "gkTeamClaimContract()": FunctionFragment;
    "initialEthPrice()": FunctionFragment;
    "initialize(string,string,address,uint256,bool,string)": FunctionFragment;
    "initializePublicSale(uint96,uint96)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "latestClaimTokenId()": FunctionFragment;
    "lockupBoolean()": FunctionFragment;
    "mintLeftOver(uint256,uint256)": FunctionFragment;
    "multiOwnerOf(uint256,uint256)": FunctionFragment;
    "multiSig()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pausedTransfer()": FunctionFragment;
    "publicBuyKey()": FunctionFragment;
    "publicExecuteBid(uint256)": FunctionFragment;
    "publicSaleDurationSeconds()": FunctionFragment;
    "publicSaleStartSecond()": FunctionFragment;
    "randomClaimBool()": FunctionFragment;
    "remainingTeamAdvisorGrant()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setGenesisKeyMerkle(address)": FunctionFragment;
    "setGkTeamClaim(address)": FunctionFragment;
    "setMultiSig(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPublicSaleDuration(uint96)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "signerAddress()": FunctionFragment;
    "startPublicSale()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleLockup(uint256[])": FunctionFragment;
    "toggleLockupBoolean()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferETH()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "whitelistedTransfer(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancelledOrFinalized",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGrantKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimKey",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentXP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalEthPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisKeyMerkle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gkTeamClaimContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialEthPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePublicSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestClaimTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockupBoolean",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintLeftOver",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiOwnerOf",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "multiSig", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pausedTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicBuyKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicExecuteBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleStartSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomClaimBool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingTeamAdvisorGrant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGenesisKeyMerkle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGkTeamClaim",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMultiSig", values: [string]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPublicSaleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPublicSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleLockup",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleLockupBoolean",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTransfer",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimGrantKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currentXP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisKeyMerkle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gkTeamClaimContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestClaimTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockupBoolean",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintLeftOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiOwnerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiSig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicBuyKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicExecuteBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleStartSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomClaimBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingTeamAdvisorGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGenesisKeyMerkle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGkTeamClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleLockup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleLockupBoolean",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTransfer",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ClaimedGenesisKey(address,uint256,uint256,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedGenesisKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type ClaimedGenesisKeyEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  {
    _user: string;
    _amount: BigNumber;
    _blockNum: BigNumber;
    _whitelist: boolean;
  }
>;

export type ClaimedGenesisKeyEventFilter =
  TypedEventFilter<ClaimedGenesisKeyEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface GenesisKey extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GenesisKeyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimGrantKey(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimKey(
      recipient: string,
      _eth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentXP(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        locked: boolean;
        current: BigNumber;
        total: BigNumber;
      }
    >;

    finalEthPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    genesisKeyMerkle(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    gkTeamClaimContract(overrides?: CallOverrides): Promise<[string]>;

    initialEthPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      name: string,
      symbol: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      _randomClaimBool: boolean,
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePublicSale(
      _initialEthPrice: BigNumberish,
      _finalEthPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestClaimTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockupBoolean(overrides?: CallOverrides): Promise<[boolean]>;

    mintLeftOver(
      quantityToClaim: BigNumberish,
      quantityToTreasury: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    multiSig(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pausedTransfer(overrides?: CallOverrides): Promise<[boolean]>;

    publicBuyKey(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publicExecuteBid(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publicSaleDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleStartSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    randomClaimBool(overrides?: CallOverrides): Promise<[boolean]>;

    remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGenesisKeyMerkle(
      _newMK: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGkTeamClaim(
      _gkTeamClaimContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiSig(
      _newMS: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _address: string,
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signerAddress(overrides?: CallOverrides): Promise<[string]>;

    startPublicSale(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleLockup(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleLockupBoolean(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedTransfer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelledOrFinalized(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimGrantKey(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimKey(
    recipient: string,
    _eth: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentXP(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      locked: boolean;
      current: BigNumber;
      total: BigNumber;
    }
  >;

  finalEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

  genesisKeyMerkle(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  gkTeamClaimContract(overrides?: CallOverrides): Promise<string>;

  initialEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    name: string,
    symbol: string,
    _multiSig: string,
    _auctionSeconds: BigNumberish,
    _randomClaimBool: boolean,
    baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePublicSale(
    _initialEthPrice: BigNumberish,
    _finalEthPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestClaimTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  lockupBoolean(overrides?: CallOverrides): Promise<boolean>;

  mintLeftOver(
    quantityToClaim: BigNumberish,
    quantityToTreasury: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiOwnerOf(
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  multiSig(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pausedTransfer(overrides?: CallOverrides): Promise<boolean>;

  publicBuyKey(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publicExecuteBid(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publicSaleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleStartSecond(overrides?: CallOverrides): Promise<BigNumber>;

  randomClaimBool(overrides?: CallOverrides): Promise<boolean>;

  remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGenesisKeyMerkle(
    _newMK: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGkTeamClaim(
    _gkTeamClaimContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiSig(
    _newMS: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicSaleDuration(
    _seconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _address: string,
    _val: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signerAddress(overrides?: CallOverrides): Promise<string>;

  startPublicSale(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleLockup(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleLockupBoolean(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferETH(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedTransfer(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimGrantKey(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimKey(
      recipient: string,
      _eth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentXP(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        locked: boolean;
        current: BigNumber;
        total: BigNumber;
      }
    >;

    finalEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    genesisKeyMerkle(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    gkTeamClaimContract(overrides?: CallOverrides): Promise<string>;

    initialEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      name: string,
      symbol: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      _randomClaimBool: boolean,
      baseURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializePublicSale(
      _initialEthPrice: BigNumberish,
      _finalEthPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestClaimTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    lockupBoolean(overrides?: CallOverrides): Promise<boolean>;

    mintLeftOver(
      quantityToClaim: BigNumberish,
      quantityToTreasury: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiSig(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pausedTransfer(overrides?: CallOverrides): Promise<boolean>;

    publicBuyKey(overrides?: CallOverrides): Promise<void>;

    publicExecuteBid(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    publicSaleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStartSecond(overrides?: CallOverrides): Promise<BigNumber>;

    randomClaimBool(overrides?: CallOverrides): Promise<boolean>;

    remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGenesisKeyMerkle(
      _newMK: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGkTeamClaim(
      _gkTeamClaimContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiSig(_newMS: string, overrides?: CallOverrides): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    setWhitelist(
      _address: string,
      _val: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signerAddress(overrides?: CallOverrides): Promise<string>;

    startPublicSale(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleLockup(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    toggleLockupBoolean(overrides?: CallOverrides): Promise<void>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferETH(overrides?: CallOverrides): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedTransfer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ClaimedGenesisKey(address,uint256,uint256,bool)"(
      _user?: string | null,
      _amount?: null,
      _blockNum?: null,
      _whitelist?: null
    ): ClaimedGenesisKeyEventFilter;
    ClaimedGenesisKey(
      _user?: string | null,
      _amount?: null,
      _blockNum?: null,
      _whitelist?: null
    ): ClaimedGenesisKeyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimGrantKey(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimKey(
      recipient: string,
      _eth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentXP(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    genesisKeyMerkle(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    gkTeamClaimContract(overrides?: CallOverrides): Promise<BigNumber>;

    initialEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      name: string,
      symbol: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      _randomClaimBool: boolean,
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePublicSale(
      _initialEthPrice: BigNumberish,
      _finalEthPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestClaimTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    lockupBoolean(overrides?: CallOverrides): Promise<BigNumber>;

    mintLeftOver(
      quantityToClaim: BigNumberish,
      quantityToTreasury: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSig(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pausedTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    publicBuyKey(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publicExecuteBid(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publicSaleDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleStartSecond(overrides?: CallOverrides): Promise<BigNumber>;

    randomClaimBool(overrides?: CallOverrides): Promise<BigNumber>;

    remainingTeamAdvisorGrant(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGenesisKeyMerkle(
      _newMK: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGkTeamClaim(
      _gkTeamClaimContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiSig(
      _newMS: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _address: string,
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    startPublicSale(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleLockup(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleLockupBoolean(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedTransfer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimGrantKey(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimKey(
      recipient: string,
      _eth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentXP(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalEthPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisKeyMerkle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gkTeamClaimContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialEthPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      name: string,
      symbol: string,
      _multiSig: string,
      _auctionSeconds: BigNumberish,
      _randomClaimBool: boolean,
      baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePublicSale(
      _initialEthPrice: BigNumberish,
      _finalEthPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestClaimTokenId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockupBoolean(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintLeftOver(
      quantityToClaim: BigNumberish,
      quantityToTreasury: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiOwnerOf(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pausedTransfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicBuyKey(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publicExecuteBid(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publicSaleDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleStartSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomClaimBool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingTeamAdvisorGrant(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGenesisKeyMerkle(
      _newMK: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGkTeamClaim(
      _gkTeamClaimContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiSig(
      _newMS: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicSaleDuration(
      _seconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _address: string,
      _val: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startPublicSale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleLockup(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleLockupBoolean(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferETH(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedTransfer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
