/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SigStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

export type SigStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export type AssetTypeStruct = { assetClass: BytesLike; data: BytesLike };

export type AssetTypeStructOutput = [string, string] & {
  assetClass: string;
  data: string;
};

export type AssetStruct = { assetType: AssetTypeStruct; data: BytesLike };

export type AssetStructOutput = [AssetTypeStructOutput, string] & {
  assetType: AssetTypeStructOutput;
  data: string;
};

export type OrderStruct = {
  maker: string;
  makeAssets: AssetStruct[];
  taker: string;
  takeAssets: AssetStruct[];
  salt: BigNumberish;
  start: BigNumberish;
  end: BigNumberish;
  nonce: BigNumberish;
  auctionType: BigNumberish;
};

export type OrderStructOutput = [
  string,
  AssetStructOutput[],
  string,
  AssetStructOutput[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  maker: string;
  makeAssets: AssetStructOutput[];
  taker: string;
  takeAssets: AssetStructOutput[];
  salt: BigNumber;
  start: BigNumber;
  end: BigNumber;
  nonce: BigNumber;
  auctionType: number;
};

export interface MarketplaceEventInterface extends utils.Interface {
  functions: {
    "emitBuyNow(bytes32,(address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256,uint256,uint8),uint8,bytes32,bytes32)": FunctionFragment;
    "emitExecuteSwap(bytes32,bytes32,(address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256,uint256,uint8),(address,((bytes4,bytes),bytes)[],address,((bytes4,bytes),bytes)[],uint256,uint256,uint256,uint256,uint8),uint8[2],bytes32[2],bytes32[2])": FunctionFragment;
    "initialize()": FunctionFragment;
    "marketPlace()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMarketPlace(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emitBuyNow",
    values: [BytesLike, OrderStruct, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitExecuteSwap",
    values: [
      BytesLike,
      BytesLike,
      OrderStruct,
      OrderStruct,
      [BigNumberish, BigNumberish],
      [BytesLike, BytesLike],
      [BytesLike, BytesLike]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketPlace",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPlace",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "emitBuyNow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitExecuteSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BuyNowInfo(bytes32,address)": EventFragment;
    "Match(bytes32,bytes32,uint8,tuple,tuple,bool)": EventFragment;
    "Match2A(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Match2B(bytes32,bytes[],bytes[],bytes4[],bytes[],bytes[],bytes4[])": EventFragment;
    "Match3A(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Match3B(bytes32,bytes[],bytes[],bytes4[],bytes[],bytes[],bytes4[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyNowInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Match"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Match2A"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Match2B"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Match3A"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Match3B"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type BuyNowInfoEvent = TypedEvent<
  [string, string],
  { makerStructHash: string; takerAddress: string }
>;

export type BuyNowInfoEventFilter = TypedEventFilter<BuyNowInfoEvent>;

export type MatchEvent = TypedEvent<
  [string, string, number, SigStructOutput, SigStructOutput, boolean],
  {
    makerStructHash: string;
    takerStructHash: string;
    auctionType: number;
    makerSig: SigStructOutput;
    takerSig: SigStructOutput;
    privateSale: boolean;
  }
>;

export type MatchEventFilter = TypedEventFilter<MatchEvent>;

export type Match2AEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    makerStructHash: string;
    makerAddress: string;
    takerAddress: string;
    start: BigNumber;
    end: BigNumber;
    nonce: BigNumber;
    salt: BigNumber;
  }
>;

export type Match2AEventFilter = TypedEventFilter<Match2AEvent>;

export type Match2BEvent = TypedEvent<
  [string, string[], string[], string[], string[], string[], string[]],
  {
    makerStructHash: string;
    sellerMakerOrderAssetData: string[];
    sellerMakerOrderAssetTypeData: string[];
    sellerMakerOrderAssetClass: string[];
    sellerTakerOrderAssetData: string[];
    sellerTakerOrderAssetTypeData: string[];
    sellerTakerOrderAssetClass: string[];
  }
>;

export type Match2BEventFilter = TypedEventFilter<Match2BEvent>;

export type Match3AEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    takerStructHash: string;
    makerAddress: string;
    takerAddress: string;
    start: BigNumber;
    end: BigNumber;
    nonce: BigNumber;
    salt: BigNumber;
  }
>;

export type Match3AEventFilter = TypedEventFilter<Match3AEvent>;

export type Match3BEvent = TypedEvent<
  [string, string[], string[], string[], string[], string[], string[]],
  {
    takerStructHash: string;
    buyerMakerOrderAssetData: string[];
    buyerMakerOrderAssetTypeData: string[];
    buyerMakerOrderAssetClass: string[];
    buyerTakerOrderAssetData: string[];
    buyerTakerOrderAssetTypeData: string[];
    buyerTakerOrderAssetClass: string[];
  }
>;

export type Match3BEventFilter = TypedEventFilter<Match3BEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface MarketplaceEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitBuyNow(
      sellHash: BytesLike,
      sellOrder: OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitExecuteSwap(
      sellHash: BytesLike,
      buyHash: BytesLike,
      sellOrder: OrderStruct,
      buyOrder: OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketPlace(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketPlace(
      _marketPlace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  emitBuyNow(
    sellHash: BytesLike,
    sellOrder: OrderStruct,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitExecuteSwap(
    sellHash: BytesLike,
    buyHash: BytesLike,
    sellOrder: OrderStruct,
    buyOrder: OrderStruct,
    v: [BigNumberish, BigNumberish],
    r: [BytesLike, BytesLike],
    s: [BytesLike, BytesLike],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketPlace(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketPlace(
    _marketPlace: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emitBuyNow(
      sellHash: BytesLike,
      sellOrder: OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emitExecuteSwap(
      sellHash: BytesLike,
      buyHash: BytesLike,
      sellOrder: OrderStruct,
      buyOrder: OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    marketPlace(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMarketPlace(
      _marketPlace: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "BuyNowInfo(bytes32,address)"(
      makerStructHash?: BytesLike | null,
      takerAddress?: null
    ): BuyNowInfoEventFilter;
    BuyNowInfo(
      makerStructHash?: BytesLike | null,
      takerAddress?: null
    ): BuyNowInfoEventFilter;

    "Match(bytes32,bytes32,uint8,tuple,tuple,bool)"(
      makerStructHash?: BytesLike | null,
      takerStructHash?: BytesLike | null,
      auctionType?: null,
      makerSig?: null,
      takerSig?: null,
      privateSale?: null
    ): MatchEventFilter;
    Match(
      makerStructHash?: BytesLike | null,
      takerStructHash?: BytesLike | null,
      auctionType?: null,
      makerSig?: null,
      takerSig?: null,
      privateSale?: null
    ): MatchEventFilter;

    "Match2A(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      makerStructHash?: BytesLike | null,
      makerAddress?: null,
      takerAddress?: null,
      start?: null,
      end?: null,
      nonce?: null,
      salt?: null
    ): Match2AEventFilter;
    Match2A(
      makerStructHash?: BytesLike | null,
      makerAddress?: null,
      takerAddress?: null,
      start?: null,
      end?: null,
      nonce?: null,
      salt?: null
    ): Match2AEventFilter;

    "Match2B(bytes32,bytes[],bytes[],bytes4[],bytes[],bytes[],bytes4[])"(
      makerStructHash?: BytesLike | null,
      sellerMakerOrderAssetData?: null,
      sellerMakerOrderAssetTypeData?: null,
      sellerMakerOrderAssetClass?: null,
      sellerTakerOrderAssetData?: null,
      sellerTakerOrderAssetTypeData?: null,
      sellerTakerOrderAssetClass?: null
    ): Match2BEventFilter;
    Match2B(
      makerStructHash?: BytesLike | null,
      sellerMakerOrderAssetData?: null,
      sellerMakerOrderAssetTypeData?: null,
      sellerMakerOrderAssetClass?: null,
      sellerTakerOrderAssetData?: null,
      sellerTakerOrderAssetTypeData?: null,
      sellerTakerOrderAssetClass?: null
    ): Match2BEventFilter;

    "Match3A(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      takerStructHash?: BytesLike | null,
      makerAddress?: null,
      takerAddress?: null,
      start?: null,
      end?: null,
      nonce?: null,
      salt?: null
    ): Match3AEventFilter;
    Match3A(
      takerStructHash?: BytesLike | null,
      makerAddress?: null,
      takerAddress?: null,
      start?: null,
      end?: null,
      nonce?: null,
      salt?: null
    ): Match3AEventFilter;

    "Match3B(bytes32,bytes[],bytes[],bytes4[],bytes[],bytes[],bytes4[])"(
      takerStructHash?: BytesLike | null,
      buyerMakerOrderAssetData?: null,
      buyerMakerOrderAssetTypeData?: null,
      buyerMakerOrderAssetClass?: null,
      buyerTakerOrderAssetData?: null,
      buyerTakerOrderAssetTypeData?: null,
      buyerTakerOrderAssetClass?: null
    ): Match3BEventFilter;
    Match3B(
      takerStructHash?: BytesLike | null,
      buyerMakerOrderAssetData?: null,
      buyerMakerOrderAssetTypeData?: null,
      buyerMakerOrderAssetClass?: null,
      buyerTakerOrderAssetData?: null,
      buyerTakerOrderAssetTypeData?: null,
      buyerTakerOrderAssetClass?: null
    ): Match3BEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    emitBuyNow(
      sellHash: BytesLike,
      sellOrder: OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitExecuteSwap(
      sellHash: BytesLike,
      buyHash: BytesLike,
      sellOrder: OrderStruct,
      buyOrder: OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketPlace(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketPlace(
      _marketPlace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emitBuyNow(
      sellHash: BytesLike,
      sellOrder: OrderStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitExecuteSwap(
      sellHash: BytesLike,
      buyHash: BytesLike,
      sellOrder: OrderStruct,
      buyOrder: OrderStruct,
      v: [BigNumberish, BigNumberish],
      r: [BytesLike, BytesLike],
      s: [BytesLike, BytesLike],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketPlace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPlace(
      _marketPlace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
